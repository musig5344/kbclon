/**
 * KB스타뱅킹 네이티브 느낌 바텀시트 컴포넌트
 * 원본 앱과 100% 동일한 모달 경험
 */

import React, { useEffect, useRef, useState } from 'react';
import styled, { css, keyframes } from 'styled-components';
import { createPortal } from 'react-dom';
import { KBDesignSystem } from '../../styles/tokens/kb-design-system';

interface KBBottomSheetProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  height?: 'auto' | 'full' | string;
  showHandle?: boolean;
  closeOnBackdrop?: boolean;
  closeOnSwipeDown?: boolean;
}

// 애니메이션
const slideUp = keyframes`
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0);
  }
`;

const slideDown = keyframes`
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(100%);
  }
`;

const fadeIn = keyframes`
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`;

const fadeOut = keyframes`
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
`;

// 배경 오버레이
const Backdrop = styled.div<{ $isClosing: boolean }>`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: ${KBDesignSystem.colors.overlay.black50};
  z-index: ${KBDesignSystem.zIndex.modalBackdrop};
  animation: ${({ $isClosing }) => $isClosing ? fadeOut : fadeIn} 
    ${KBDesignSystem.animation.duration.fast} 
    ${KBDesignSystem.animation.easing.easeOut};
`;

// 바텀시트 컨테이너
const SheetContainer = styled.div<{ 
  $height: string;
  $isClosing: boolean;
}>`
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: ${KBDesignSystem.colors.background.white};
  border-radius: ${KBDesignSystem.borderRadius.modal} ${KBDesignSystem.borderRadius.modal} 0 0;
  box-shadow: ${KBDesignSystem.shadows.bottomSheet};
  z-index: ${KBDesignSystem.zIndex.modal};
  overflow: hidden;
  
  /* 높이 */
  ${({ $height }) => {
    if ($height === 'auto') {
      return css`
        max-height: 90vh;
      `;
    } else if ($height === 'full') {
      return css`
        height: 100vh;
        padding-top: env(safe-area-inset-top);
      `;
    } else {
      return css`
        height: ${$height};
        max-height: 90vh;
      `;
    }
  }}
  
  /* 애니메이션 */
  animation: ${({ $isClosing }) => $isClosing ? slideDown : slideUp} 
    ${KBDesignSystem.animation.duration.normal} 
    ${KBDesignSystem.animation.easing.decelerate};
  
  /* 모바일 새프 에리어 */
  padding-bottom: env(safe-area-inset-bottom);
  
  /* 터치 최적화 */
  touch-action: pan-y;
  -webkit-overflow-scrolling: touch;
`;

// 드래그 핸들
const DragHandle = styled.div`
  display: flex;
  justify-content: center;
  padding: ${KBDesignSystem.spacing.sm} 0;
  cursor: grab;
  
  &:active {
    cursor: grabbing;
  }
`;

const HandleBar = styled.div`
  width: 48px;
  height: 4px;
  background-color: ${KBDesignSystem.colors.border.medium};
  border-radius: ${KBDesignSystem.borderRadius.full};
`;

// 헤더
const SheetHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: ${KBDesignSystem.spacing.base} ${KBDesignSystem.spacing.lg};
  border-bottom: 1px solid ${KBDesignSystem.colors.border.light};
`;

const SheetTitle = styled.h2`
  margin: 0;
  font-size: ${KBDesignSystem.typography.fontSize.lg};
  font-weight: ${KBDesignSystem.typography.fontWeight.semibold};
  color: ${KBDesignSystem.colors.text.primary};
`;

const CloseButton = styled.button`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  padding: 0;
  background: none;
  border: none;
  outline: none;
  cursor: pointer;
  color: ${KBDesignSystem.colors.text.secondary};
  border-radius: ${KBDesignSystem.borderRadius.full};
  transition: all ${KBDesignSystem.animation.duration.fast} ${KBDesignSystem.animation.easing.easeOut};
  
  &:hover {
    background-color: ${KBDesignSystem.colors.background.gray200};
  }
  
  &:active {
    transform: scale(0.9);
  }
`;

// 컨텐츠 영역
const SheetContent = styled.div<{ $hasHeader: boolean }>`
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  
  /* 헤더가 있을 때 최대 높이 조정 */
  ${({ $hasHeader }) => $hasHeader && css`
    max-height: calc(90vh - 60px);
  `}
`;

// X 아이콘
const CloseIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
  </svg>
);

export const KBBottomSheet: React.FC<KBBottomSheetProps> = ({
  isOpen,
  onClose,
  title,
  children,
  height = 'auto',
  showHandle = true,
  closeOnBackdrop = true,
  closeOnSwipeDown = true,
}) => {
  const [isClosing, setIsClosing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [dragStartY, setDragStartY] = useState(0);
  const [currentY, setCurrentY] = useState(0);
  const sheetRef = useRef<HTMLDivElement>(null);
  
  // 닫기 처리
  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      onClose();
      setIsClosing(false);
    }, KBDesignSystem.animation.duration.normal as unknown as number);
  };
  
  // 배경 클릭
  const handleBackdropClick = () => {
    if (closeOnBackdrop) {
      handleClose();
    }
  };
  
  // 스와이프 다운 시작
  const handleDragStart = (e: React.TouchEvent | React.MouseEvent) => {
    if (!closeOnSwipeDown) return;
    
    const startY = 'touches' in e ? e.touches[0].clientY : e.clientY;
    setIsDragging(true);
    setDragStartY(startY);
    setCurrentY(0);
  };
  
  // 스와이프 중
  const handleDragMove = (e: TouchEvent | MouseEvent) => {
    if (!isDragging || !closeOnSwipeDown) return;
    
    const y = 'touches' in e ? e.touches[0].clientY : e.clientY;
    const deltaY = y - dragStartY;
    
    if (deltaY > 0) {
      setCurrentY(deltaY);
      if (sheetRef.current) {
        sheetRef.current.style.transform = `translateY(${deltaY}px)`;
      }
    }
  };
  
  // 스와이프 끝
  const handleDragEnd = () => {
    if (!isDragging || !closeOnSwipeDown) return;
    
    setIsDragging(false);
    
    // 100px 이상 드래그하면 닫기
    if (currentY > 100) {
      handleClose();
    } else {
      // 원위치로 복귀
      if (sheetRef.current) {
        sheetRef.current.style.transition = `transform ${KBDesignSystem.animation.duration.fast} ${KBDesignSystem.animation.easing.easeOut}`;
        sheetRef.current.style.transform = 'translateY(0)';
        setTimeout(() => {
          if (sheetRef.current) {
            sheetRef.current.style.transition = '';
          }
        }, 150);
      }
    }
    
    setCurrentY(0);
  };
  
  // 이벤트 리스너 등록
  useEffect(() => {
    if (isDragging) {
      const handleMove = (e: TouchEvent | MouseEvent) => handleDragMove(e);
      const handleEnd = () => handleDragEnd();
      
      document.addEventListener('touchmove', handleMove, { passive: false });
      document.addEventListener('mousemove', handleMove);
      document.addEventListener('touchend', handleEnd);
      document.addEventListener('mouseup', handleEnd);
      
      return () => {
        document.removeEventListener('touchmove', handleMove);
        document.removeEventListener('mousemove', handleMove);
        document.removeEventListener('touchend', handleEnd);
        document.removeEventListener('mouseup', handleEnd);
      };
    }
    return () => {}; // Return empty cleanup function when not dragging
  }, [isDragging, dragStartY, currentY]);
  
  // ESC 키 이벤트
  useEffect(() => {
    const handleEsc = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        handleClose();
      }
    };
    
    document.addEventListener('keydown', handleEsc);
    return () => document.removeEventListener('keydown', handleEsc);
  }, [isOpen]);
  
  // 바디 스크롤 비활성화
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);
  
  if (!isOpen && !isClosing) return null;
  
  return createPortal(
    <>
      <Backdrop 
        $isClosing={isClosing} 
        onClick={handleBackdropClick}
      />
      <SheetContainer
        ref={sheetRef}
        $height={height}
        $isClosing={isClosing}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? 'sheet-title' : undefined}
      >
        {/* 드래그 핸들 */}
        {showHandle && (
          <DragHandle
            onTouchStart={handleDragStart}
            onMouseDown={handleDragStart}
          >
            <HandleBar />
          </DragHandle>
        )}
        
        {/* 헤더 */}
        {title && (
          <SheetHeader>
            <SheetTitle id="sheet-title">{title}</SheetTitle>
            <CloseButton onClick={handleClose} aria-label="닫기">
              <CloseIcon />
            </CloseButton>
          </SheetHeader>
        )}
        
        {/* 컨텐츠 */}
        <SheetContent $hasHeader={Boolean(title)}>
          {children}
        </SheetContent>
      </SheetContainer>
    </>,
    document.body
  );
};

export default KBBottomSheet;