import React from 'react';
import styled from 'styled-components';
import { tokens } from '../../styles/tokens';
// import { colors } from '../../styles/colors'; // 사용되지 않음
import { dimensions } from '../../styles/dimensions';
import { typography } from '../../styles/typography';
import { duration, easing } from '../../styles/animations';
// import Button from '../../shared/components/ui/Button'; // 사용되지 않음
interface KBModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  headerActions?: React.ReactNode;
  footerActions?: React.ReactNode;
  size?: 'small' | 'medium' | 'large' | 'fullscreen';
  showBackButton?: boolean;
  onBackClick?: () => void;
}
// 모달 오버레이
const ModalOverlay = styled.div<{ $isOpen: boolean }>`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: ${tokens.colors.dimmedBackground};
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  padding: 0;
  opacity: ${props => props.$isOpen ? 1 : 0};
  visibility: ${props => props.$isOpen ? 'visible' : 'hidden'};
  transition: opacity ${duration.normal} ${easing.easeOut},
              visibility ${duration.normal} ${easing.easeOut};
`;
// KB스타뱅킹 모달 컨테이너
const ModalContainer = styled.div<{ $isOpen: boolean; $size: string }>`
  background-color: ${tokens.colors.background.primary};
  display: flex;
  flex-direction: column;
  overflow: hidden;
  ${props => {
    switch (props.$size) {
      case 'small':
        return `
          border-radius: ${dimensions.borderRadius.dialog}px;
          box-shadow: ${dimensions.elevation.dialog};
          max-width: 480px;
          width: 90%;
          max-height: 60vh;
          margin: 20px;
        `;
      case 'medium':
        return `
          border-radius: ${dimensions.borderRadius.medium}px;
          box-shadow: ${dimensions.elevation.bottomSheet};
          max-width: 600px;
          width: 95%;
          max-height: 80vh;
          margin: 20px;
        `;
      case 'large':
        return `
          border-radius: ${dimensions.borderRadius.medium}px;
          box-shadow: ${dimensions.elevation.bottomSheet};
          width: 95%;
          max-width: 800px;
          max-height: 90vh;
          margin: 20px;
        `;
      case 'fullscreen':
        return `
          width: 100%;
          height: 100%;
          border-radius: 0;
          margin: 0;
        `;
      default:
        return `
          border-radius: ${dimensions.borderRadius.medium}px;
          box-shadow: ${dimensions.elevation.bottomSheet};
          max-width: 600px;
          width: 95%;
          max-height: 80vh;
          margin: 20px;
        `;
    }
  }}
  transform: ${props => props.$isOpen ? 'scale(1) translateY(0)' : 'scale(0.95) translateY(30px)'};
  opacity: ${props => props.$isOpen ? 1 : 0};
  transition: transform ${duration.normal} ${easing.easeOut},
              opacity ${duration.normal} ${easing.easeOut};
  @media (max-width: 768px) {
    width: 100%;
    height: 100%;
    border-radius: 0;
    margin: 0;
  }
`;
// 모달 헤더
const ModalHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 20px 24px;
  border-bottom: 1px solid ${tokens.colors.backgroundGray2};
  background-color: ${tokens.colors.background.primary};
  min-height: 64px;
  flex-shrink: 0;
`;
const HeaderLeft = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;
const BackButton = styled.button`
  width: 32px;
  height: 32px;
  border: none;
  background: none;
  cursor: pointer;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: ${tokens.colors.text.primary};
  transition: all 0.2s ease;
  &:hover {
    background-color: ${tokens.colors.backgroundGray1};
  }
  &::before {
    content: '←';
    font-size: 18px;
    line-height: 1;
  }
`;
const ModalTitle = styled.h1`
  font-family: ${typography.fontFamily.kbfgTextBold};
  font-size: 18px;
  font-weight: 700;
  color: ${tokens.colors.text.primary};
  margin: 0;
  line-height: 1.4;
`;
const HeaderActions = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;
const CloseButton = styled.button`
  width: 32px;
  height: 32px;
  border: none;
  background: none;
  cursor: pointer;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: ${tokens.colors.text.tertiary};
  transition: all 0.2s ease;
  &:hover {
    background-color: ${tokens.colors.backgroundGray1};
    color: ${tokens.colors.text.primary};
  }
  &::before {
    content: '×';
    font-size: 24px;
    line-height: 1;
  }
`;
// 모달 본문
const ModalContent = styled.div`
  flex: 1;
  overflow-y: auto;
  padding: 24px;
  /* 커스텀 스크롤바 */
  &::-webkit-scrollbar {
    width: 6px;
  }
  &::-webkit-scrollbar-track {
    background: ${tokens.colors.backgroundGray1};
    border-radius: 3px;
  }
  &::-webkit-scrollbar-thumb {
    background: ${tokens.colors.border.light};
    border-radius: 3px;
    &:hover {
      background: ${tokens.colors.text.tertiary};
    }
  }
`;
// 모달 푸터
const ModalFooter = styled.div`
  padding: 16px 24px 24px;
  border-top: 1px solid ${tokens.colors.backgroundGray2};
  background-color: ${tokens.colors.background.primary};
  flex-shrink: 0;
`;
const KBModal: React.FC<KBModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  headerActions,
  footerActions,
  size = 'medium',
  showBackButton = false,
  onBackClick,
}) => {
  const handleOverlayClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };
  const handleBackClick = () => {
    if (onBackClick) {
      onBackClick();
    } else {
      onClose();
    }
  };
  // ESC 키로 모달 닫기
  React.useEffect(() => {
    const handleEscapeKey = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isOpen) {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener('keydown', handleEscapeKey);
      // 모달 오픈 시 스크롤 방지
      document.body.style.overflow = 'hidden';
    }
    return () => {
      document.removeEventListener('keydown', handleEscapeKey);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);
  return (
    <ModalOverlay $isOpen={isOpen} onClick={handleOverlayClick}>
      <ModalContainer $isOpen={isOpen} $size={size}>
        <ModalHeader>
          <HeaderLeft>
            {showBackButton && (
              <BackButton onClick={handleBackClick} />
            )}
            <ModalTitle>{title}</ModalTitle>
          </HeaderLeft>
          <HeaderActions>
            {headerActions}
            <CloseButton onClick={onClose} />
          </HeaderActions>
        </ModalHeader>
        <ModalContent>
          {children}
        </ModalContent>
        {footerActions && (
          <ModalFooter>
            {footerActions}
          </ModalFooter>
        )}
      </ModalContainer>
    </ModalOverlay>
  );
};
export default KBModal;